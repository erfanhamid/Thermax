@model BEEERP.Models.ViewModel.Sales.CustomerBalanceAdjustmentVModel
@using BEEERP.Models.CommonInformation

@{
    ViewBag.Title = "CustomerBalanceAdjustment";
}


<style>
    .btn:hover {
        color: blue !important;
    }

    .btn:focus {
        background-color: aqua !important;
    }

    .select2-selection--single:focus {
        background-color: aqua !important;
    }
</style>

<form id="report" target="_blank">
    <div class="content">
        <div class="row">
            <div class="form-horizontal">
                <div class="box-body">
                    <div class="row">
                        <div class="col-md-12">
                            <div class="box ">
                                <div class="box-header with-border box-head-back" style="text-align:center;">
                                    <h3 class="box-title">Customer Amount Adjustment (CAA)</h3>
                                </div>
                                <div class="box-body">
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            @Html.LabelFor(m => m.CAANo, "CAA No", new { @class = "col-md-4 control-label" })
                                            <div class="col-sm-8 input-group" style="padding-left:2%; padding-right:2%;">
                                                @Html.TextBoxFor(m => m.CAANo, new { @class = "form-control", @Value = ViewBag.Id })
                                                @Html.ValidationMessageFor(m => m.CAANo, "", new { @style = "color: red" })
                                                <div class="input-group-btn">
                                                    <input type="button" name="search" id="search" value="Search" class="btn skin-blue" />
                                                </div>
                                            </div>
                                        </div>
                                        @if (UserAccessAction.IsAdmin)
                                        {
                                            <div class="form-group">
                                                @Html.LabelFor(m => m.BranchId, new { @class = "col-md-4 control-label" })
                                                <div class="col-sm-8">
                                                    @Html.DropDownListFor(m => m.BranchId, (IEnumerable<SelectListItem>)ViewBag.Depot, new { @class = "form-control select2" })
                                                    @Html.ValidationMessageFor(m => m.BranchId, "", new { @style = "color: red" })
                                                </div>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="form-group">
                                                @Html.LabelFor(m => m.BranchId, new { @class = "col-md-4 control-label" })
                                                <div class="col-sm-8">
                                                    @Html.DropDownListFor(m => m.BranchId, (IEnumerable<SelectListItem>)ViewBag.Depot, new { @class = "form-control select2", @disabled = "disabled" })
                                                    @Html.ValidationMessageFor(m => m.BranchId, "", new { @style = "color: red" })
                                                </div>
                                            </div>
                                        }

                                        <div class="form-group">
                                            @Html.LabelFor(m => m.CustomerId, new { @class = "col-md-4 control-label" })
                                            <div class="col-sm-8 input-group" style="padding-left:2%; padding-right:2%;">
                                                @Html.TextBoxFor(m => m.CustomerId, new { @class = "form-control" })
                                                @Html.ValidationMessageFor(m => m.CustomerId, "", new { @style = "color: red" })
                                                <div class="input-group-btn">
                                                    <input type="button" name="searchCustomer" id="searchCustomer" value="Search" class="btn skin-blue" />
                                                </div>
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            @Html.LabelFor(m => m.InvoiceNo, new { @class = "col-md-4 control-label" })
                                            <div class="col-sm-8">
                                                @Html.DropDownListFor(m => m.InvoiceNo, (IEnumerable<SelectListItem>)ViewBag.Invoice, new { @class = "form-control select2" })
                                                @Html.ValidationMessageFor(m => m.InvoiceNo, "", new { @style = "color: red" })
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            @Html.LabelFor(m => m.Amount, new { @class = "col-md-4 control-label" })
                                            <div class="col-sm-8">
                                                @Html.TextBoxFor(m => m.Amount, new { @class = "form-control" })
                                                @Html.ValidationMessageFor(m => m.Amount, "", new { @style = "color: red" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-group" style="padding-top:6.5%;">
                                            @Html.LabelFor(m => m.Date, new { @class = "col-md-4 control-label" })
                                            <div class="col-sm-8 input-group" style="padding-left:2%; padding-right:2%">
                                                @Html.TextBoxFor(m => m.Date, new { @class = "form-control date", @Value = DateTime.Now.ToString("dd-MM-yyyy") })
                                                @Html.ValidationMessageFor(m => m.Date, "", new { @style = "color: red" })
                                                <div class="input-group-addon">
                                                    <i class="fa fa-calendar"></i>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            @Html.LabelFor(m => m.CustomerName, new { @class = "col-md-4 control-label" })
                                            <div class="col-sm-8">
                                                @Html.TextBoxFor(m => m.CustomerName, new { @class = "form-control", @disabled = "disabled" })
                                                @Html.ValidationMessageFor(m => m.CustomerName, "", new { @style = "color: red" })
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            @Html.LabelFor(m => m.DueAmount, new { @class = "col-md-4 control-label" })
                                            <div class="col-sm-8">
                                                @Html.TextBoxFor(m => m.DueAmount, new { @class = "form-control", @disabled = "disabled" })
                                                @Html.ValidationMessageFor(m => m.DueAmount, "", new { @style = "color: red" })
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            @Html.LabelFor(m => m.AfterAdjustment, new { @class = "col-md-4 control-label" })
                                            <div class="col-sm-8">
                                                @Html.TextBoxFor(m => m.AfterAdjustment, new { @class = "form-control", @disabled = "disabled" })
                                                @Html.ValidationMessageFor(m => m.AfterAdjustment, "", new { @style = "color: red" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-12" style="padding:0%">
                                        <div class="form-group" style="text-align:center;padding-right:8%;">
                                            <button type="button" id="addToGrid" name="addToGrid" style="height:300%; font-size:100%;" class="btn">Add To Grid</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="box ">
                                        <div class="box-header with-border box-head-back" style="text-align:center;">
                                            <h3 class="box-title">Customer Amount Adjustment List</h3>
                                        </div>
                                        <div class="box-body">
                                            <table class="table table-responsive" id="CAAlist">
                                                <thead>
                                                    <tr>
                                                        <th>Invoice No</th>
                                                        <th>Adjusted Amount</th>
                                                        <th>Action</th>
                                                    </tr>
                                                </thead>
                                                <tbody></tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="form-group">
                                        <div class="col-md-2"></div>
                                        <div class="col-md-8" style="text-align:center;">
                                            <input type="button" value="Save" id="save" class="btn skin-blue" style="padding-left:20px;" />
                                            <input type="button" name="update" id="update" value="Update" class="btn skin-blue" />
                                            <input type="button" name="delete" id="delete" value="Delete" class="btn skin-blue" />
                                            <input type="button" name="clear" id="clear" value="Clear" class="btn skin-blue" />
                                            <input type="button" name="refresh" id="refresh" value="Refresh" class="btn skin-blue" />
                                            <input type="button" name="print" id="print" value="Print" class="btn skin-blue" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="TotalAAmount" />
</form>

@section Scripts
{
    <script src="~/Scripts/SalesModule/CustomerBalanceAdjustmentInputFocus.js"></script>
    <script>

        $('.date').datepicker({
            autoclose: true,
            format: 'dd-mm-yyyy',
        });

        var table = $('#CAAlist').DataTable({
            'paging': false,
            'lengthChange': false,
            'searching': false,
            'ordering': true,
            'info': true,
            'autoWidth': false
        });

        $(document).on('click', "#refresh", function () {
            location.reload();
        });

        $(".select2").select2();

        var invoiceNo = "";
        var isValid = true;
        var addedItems = [];
        var amount = "";
        var cba = { CAANo: 0, Date: "", BranchId: 0, CustomerId: 0, TotalAAmount: 0.0 };

        $(document).ready(function () {
            $("#update").hide();
            $("#delete").hide();
            $("#clear").hide();
            $("#print").hide();
            $("#BranchId").val(@ViewBag.DepotId).change();
        });

        EnterPress();

        $(document).on('click', "#searchCustomer", function () {
            RemoveError();
            ValidateSearchCustomer();
            if (isValid == true) {
                var id = { custId: $("#CustomerId").val(), depot: $("#BranchId").val() };
                $.ajax({
                    url: '@Url.Action("GetDueCustomerId", "CustomerBalanceAdjustment")',
                    contentType: "application/json;charset=utf-8",
                    data: id,
                    type: 'GET',
                    dataType: 'json',
                    success: function (datas) {
                        if (datas.Message == 1) {
                            alert("Customer Not Found.");
                        }
                        else {
                            $("#InvoiceNo").empty();
                            $("#InvoiceNo").prop("disabled", false);
                            $.each(datas.Item, function (index, value) {
                                $("#InvoiceNo").append($('<option />', {
                                    value: value.Value,
                                    text: value.Text
                                })).trigger('change');
                            });
                            $("#InvoiceNo").focus();
                            if (invoiceNo != "") {
                                $("#InvoiceNo").val(invoiceNo).change();
                                invoiceNo = "";
                            }
                            $("#CustomerName").val(datas.CustomerName);
                        }
                    }
                });
            }
            else {
                $("#InvoiceNo").val("").change();
                $("#InvoiceNo").prop("disabled", true);
            }
        });

        $(document).on('change', "#InvoiceNo", function () {
            var id = { invoice: $(this).val(), custId: $("#CustomerId").val(), depot: $("#BranchId").val() };
            if (id.invoice != "") {
                $.ajax({
                    url: '@Url.Action("GetDueAmount", "CustomerBalanceAdjustment")',
                    contentType: "application/json;charset=utf-8",
                    data: id,
                    type: 'GET',
                    dataType: 'json',
                    success: function (datas) {
                        if (amount != "") {
                            $("#Amount").val(amount);
                            $("#DueAmount").val(datas + amount);
                            $("#AfterAdjustment").val(datas);
                            amount = "";
                        }
                        else {
                            $("#DueAmount").val(datas);
                            $("#Amount").val(datas);
                        }
                    }
                });
            }
            else {

            }
        });

        $(document).on('focusout', "#Amount", function () {
            $("#AfterAdjustment").val($("#DueAmount").val() - $("#Amount").val());
        });

        $(document).on('click', '#addToGrid', function () {
            RemoveError();
            var item = { CAANo: 0, InvoiceNo: 0, Amount: 0.0 }
            ValidateAddToGrid();
            if (isValid == true) {
                item.InvoiceNo = $("#InvoiceNo").val();
                item.Amount = $("#Amount").val();
                addedItems.push(item);
                ClearOnSearch();
                ShowOnTable();
            }
        });

        //delete Row
        $(document).on('click', '[name="deleteRow"]', function () {
            var item = $(this).attr("value");
            var newItem = [];
            if (confirm('Are you sure you want to delete this from Grid ?')) {
                $.each(addedItems, function (index, value) {
                    if (value.InvoiceNo == item) {

                    }
                    else {
                        newItem.push(value);
                    }

                });
                addedItems = newItem;
                ShowOnTable();
            }
        });


        //edit Row
        $(document).on('click', '[name="editRow"]', function () {
            var item = $(this).attr("value");
            var newItem = [];
            $.each(addedItems, function (index, value) {
                var inv = value.InvoiceNo;
                if (inv == item) {

                    $("#InvoiceNo").val(value.InvoiceNo).change();
                    amount = value.Amount

                    //invoiceNo = value.InvoiceNo;
                }
                else {
                    newItem.push(value);
                }

            });
            addedItems = newItem;
            ShowOnTable();
        });

        $(document).on('click', "#save", function () {
            RemoveError();
            $("#save").prop('disabled', true);
            SetCBA();
            if (addedItems.length <= 0) {
                alert("At least One Item should be added for save.");
                $("#save").prop('disabled', false);
            }
            else {
                ValidateCBA();
                $.each(addedItems, function (index, value) {
                    if (value.InvoiceNo == "OB") {
                        value.InvoiceNo = 0;
                    }
                });
                if (isValid == true) {
                    if (confirm('Do you want to save')) {
                        $.ajax({
                            url: '@Url.Action("SaveCBA", "CustomerBalanceAdjustment")',
                            contentType: "application/json;charset=utf-8",
                            data: JSON.stringify({ cba: cba, addedItems: addedItems }),
                            type: 'POST',
                            dataType: 'json',
                            success: function (datas) {
                                if (datas == 0) {
                                    alert("Failed To Saved.");
                                    $("#save").prop('disabled', false);
                                }
                                else {
                                    alert("Sucessfully Saved.");
                                    $("#CAANo").val(datas.cba.CAANo);
                                    $("#print").show();
                                    $("#save").prop('disabled', true);
                                }
                            }
                        });
                    }
                    else {
                        $("#save").prop('disabled', false);
                    }
                }
                else {
                    $("#save").prop('disabled', false);
                }
            }
        });

        //search code
        $(document).on('click', '#search', function () {
            $("#search").prop('disabled', true);
            var id = { id: $("#CAANo").val() };
            ClearOnSearch();
            $.ajax({
                    url: '@Url.Action("GetCBAById", "CustomerBalanceAdjustment")',
                    contentType: "application/json;charset=utf-8",
                    data: id,
                    type: 'GET',
                    dataType: 'json',
                    success: function (datas) {

                        if (datas == 0) {
                            alert("Your entered CAA No. Doesn't exist");
                            $("#search").prop('disabled', false);
                        }
                        else {
                            $("#save").hide();
                            $("#update").show();
                            $("#delete").show();
                            var cba = { CAANo: 0, Date: "", BranchId: 0, CustomerId: 0, TotalAAmount: 0.0 };
                            $("#Date").val((moment(datas.cbaItem.Date).format("DD-MM-YYYY")));
                            $("#CAANo").val(datas.cbaItem.CAANo);
                            $("#BranchId").val(datas.cbaItem.BranchId).change();
                            $("#CustomerId").val(datas.cbaItem.CustomerId);
                            $("#TotalAAmount").val(datas.cbaItem.TotalAAmount);
                            $("#searchCustomer").click();
                            //$("#InvoiceNo").blur();
                            addedItems = [];

                            $.each(datas.cbaLineItem, function (index, value) {
                                var item = { CAANo: 0, InvoiceNo: 0, Amount: 0.0 };
                                if (value.InvoiceNo == 0) {
                                    item.InvoiceNo = "OB";
                                }
                                else {
                                    item.InvoiceNo = value.InvoiceNo;
                                }
                                item.Amount = value.Amount;
                                addedItems.push(item);
                            });
                            ShowOnTable();
                            $("#print").show();
                        }
                },
                error: function () {
                    alert("Please check your internet connection first. If this doesn't sole your problem, then Contact With Paankouri Software & Services")
                    $("#search").prop('disabled', false);
                }
            });
        });

        $(document).on('click', "#update", function () {
            RemoveError();
            $("#update").prop('disabled', true);
            SetCBA();
            cba.CAANo = $("#CAANo").val();

            if (addedItems.length <= 0) {
                alert("At least One Item should be added for Update.");
                $("#update").prop('disabled', false);
            }
            else {
                ValidateCBA();
                $.each(addedItems, function (index, value) {
                    if (value.InvoiceNo == "OB") {
                        value.InvoiceNo = 0;
                    }
                });
                if (isValid == true) {
                    if (confirm('Do you want to Update')) {
                    $.ajax({
                        url: '@Url.Action("UpdateCBA", "CustomerBalanceAdjustment")',
                        contentType: "application/json;charset=utf-8",
                        data: JSON.stringify({ cba: cba, addedItems: addedItems }),
                        type: 'POST',
                        dataType: 'json',
                        success: function (datas) {
                            if (datas == 0) {
                                alert("Failed To Update.");
                                $("#update").prop('disabled', false);
                            }
                            else {
                                alert("Sucessfully Updated.");
                                $("#update").prop('disabled', true);
                            }
                        }
                    });
                }
                    else {
                        $("#update").prop('disabled', false);
                    }
                }
                else {
                    $("#update").prop('disabled', false);
                }
            }
        });

        $(document).on('click', "#delete", function () {
            $("#update").prop('disabled', true);
            $("#delete").prop('disabled', true);
            var id = $("#CAANo").val();
            if (confirm('Are you sure you want to delete this from the database?')) {
                $.ajax({
                    url: '@Url.Action("DeleteCBAById", "CustomerBalanceAdjustment")',
                    contentType: "application/json;charset=utf-8",
                    data: { id: id },
                    type: 'GET',
                    dataType: 'json',
                    success: function (datas) {
                        if (datas == 0) {
                            alert("Delete failed.");
                            $("#delete").prop('disabled', false);
                            $("#update").prop('disabled', false);
                        }
                        else {
                            alert("Delete Successfull");
                            location.reload();
                        }
                    }
                });
            }
            else {
                $("#update").prop('disabled', false);
                $("#delete").prop('disabled', false);
            }
        });

        $(document).on('click', "#print", function () {

            event.preventDefault();
            if ($("#CAANo").val() != "") {
                $("#report").attr("action", "/CustomerBalanceAdjustment/GetCBAPreview");
                $("#report").submit();
            }
        });

        function ShowOnTable() {
            table.clear().draw();
            var totamount = 0;

            $.each(addedItems, function (index, value) {
                table.row.add([value.InvoiceNo, value.Amount,
                '<a href="#"><i class="fa fa-edit" name="editRow" value="' +
                value.InvoiceNo + '"></i></a> &ensp;&ensp;&ensp;<a href="#"><i class="fa fa-trash" name="deleteRow" value="' + value.InvoiceNo + '"></i></a>']).draw();

                totamount += parseFloat(value.Amount);
            });
            $("#TotalAAmount").val(parseFloat(totamount).toFixed(2));
        }

        function ValidateSearchCustomer() {
            isValid = true;
            if ($("#CustomerId").val() == "") {
                setError("CustomerId", "Customer Id is required for Search.");
                isValid = false;
            }
            if ($("#BranchId").val() == "") {
                setError("BranchId", "Branch Id is required for Search.");
                isValid = false;
            }
        }

        function ValidateAddToGrid() {
            isValid = true;
            if ($("#Amount").val() == "") {
                setError("Amount", "Amount is required field");
                isValid = false;
            }
            if ($("#Amount").val() <= 0) {
                setError("Amount", "Amount must be grater than Zero");
                isValid = false;
            }

            if ($("#InvoiceNo").val() == "") {
                setError("InvoiceNo", "Invoice No is required field");
                isValid = false;
            }

            if (parseFloat($("#Amount").val()) > parseFloat($("#DueAmount").val())) {
                setError("Amount", "Amount can not be greater than due amount.");
                isValid = false;
            }

            $.each(addedItems, function (index, value) {
                if (value.InvoiceNo == $("#InvoiceNo").val()) {
                    setError("InvoiceNo", "This Invoice No is Already Added.");
                    isValid = false;
                }
            });
        }

        function ClearOnSearch() {
            $("#InvoiceNo").val("").change();
            $("#Amount").val("");
            $("#DueAmount").val("");
            $("#AfterAdjustment").val("");
            invoiceNo = "";
        }

        function SetCBA() {
            cba.CAANo = 0;
            cba.Date = $("#Date").val();
            cba.BranchId = $("#BranchId").val();
            cba.CustomerId = $("#CustomerId").val();
            cba.TotalAAmount = $("#TotalAAmount").val();
        }


        function ValidateCBA() {
            isValid = true;
            if (cba.Date == "") {
                setError("Date", "Date is required field");
                isValid = false;
            }
            if (cba.BranchId == "") {
                setError("BranchId", "Depot is required field");
                isValid = false;
            }
            if (cba.CustomerId == "") {
                setError("CustomerId", "Customer Id is required field");
                isValid = false;
            }
        }

    </script>
}

