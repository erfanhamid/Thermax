@model BEEERP.Models.ViewModel.Sales.SalesReturnViewModel
@using BEEERP.Models.CommonInformation

@{
    ViewBag.Title = "SalesReturn";
}



<style>
    .btn:hover {
        color: blue !important;
    }

    .btn:focus {
        background-color: aqua !important;
    }

    .select2-selection--single:focus {
        background-color: aqua !important;
    }
</style>

<div class="content">
    <div class="row">
        <div class="form-horizontal">
            <div class="box-body">
                <div class="row">
                    <div class="col-md-12" style="padding-left:0%;padding-right:0%">
                        <div class="box">
                            <div class="box-header with-border box-head-back">
                                <h3 class="box-title">Sales Return (Previous)</h3>
                            </div>
                            <div class="box-body" style="padding-right:0%">
                                <div class="col-md-6" style="padding-left:5%">
                                    <form id="report" target="_blank">
                                        <div class="form-group">
                                            @Html.LabelFor(m => m.SRNo, new { @class = "col-md-4 control-label" })
                                            <div class="col-sm-8 input-group">
                                                @Html.TextBoxFor(m => m.SRNo, new { @class = "form-control", @Value = ViewBag.Id })
                                                @Html.ValidationMessageFor(m => m.SRNo, "", new { @style = "color: red" })
                                                <div class="input-group-btn">
                                                    <input type="button" name="search" id="srSearch" value="Search" class="btn skin-blue" />
                                                </div>
                                            </div>
                                        </div>
                                    </form>
                                    
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.InvoiceNo, new { @class = "col-md-4 control-label" })
                                        <div class="col-sm-8 input-group" >
                                            @Html.TextBoxFor(m => m.InvoiceNo, new { @class = "form-control", @type="number" })
                                            @Html.ValidationMessageFor(m => m.InvoiceNo, "", new { @style = "color: red" })
                                        </div>
                                    </div>
                                    @if (UserAccessAction.IsAdmin)
                                    {
                                        <div class="form-group">
                                            @Html.LabelFor(m => m.BranchId, "Depot", new { @class = "col-md-4 control-label" })
                                            <div class="col-sm-8 input-group">
                                                @Html.DropDownListFor(m => m.BranchId, (IEnumerable<SelectListItem>)ViewBag.Depot, new { @class = "form-control select2" })
                                                @Html.ValidationMessageFor(m => m.BranchId, "", new { @style = "color: red" })
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="form-group">
                                            @Html.LabelFor(m => m.BranchId, "Depot", new { @class = "col-md-4 control-label" })
                                            <div class="col-md-8 input-group" >
                                                @Html.DropDownListFor(m => m.BranchId, (IEnumerable<SelectListItem>)ViewBag.Depot, new { @class = "form-control select2", @disabled = "disabled" })
                                                @Html.ValidationMessageFor(m => m.BranchId, "", new { @style = "color: red" })
                                            </div>
                                        </div>
                                    }

                                    <div class="form-group">
                                        @Html.LabelFor(m => m.Store, new { @class = "col-md-4 control-label" })
                                        <div class="col-md-8 input-group" >
                                            @Html.DropDownListFor(m => m.Store, (IEnumerable<SelectListItem>)ViewBag.Store, new { @class = "form-control select2" })
                                            @Html.ValidationMessageFor(m => m.Store, "", new { @style = "color: red" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6" style="padding-right:10%">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.TSO, new { @class = "col-md-4 control-label" })
                                        <div class="col-sm-8 input-group">
                                            @Html.DropDownListFor(m => m.TSO, (IEnumerable<SelectListItem>)ViewBag.TSO, new { @class = "form-control select2" })
                                            @Html.ValidationMessageFor(m => m.TSO, "", new { @style = "color: red" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.CustomerId, new { @class = "col-md-4 control-label" })
                                        <div class="col-sm-8 input-group">
                                            @Html.DropDownListFor(m => m.CustomerId, (IEnumerable<SelectListItem>)ViewBag.Customer, new { @class = "form-control select2" })
                                            @Html.ValidationMessageFor(m => m.CustomerId, "", new { @style = "color: red" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.SRDate, new { @class = "col-md-4 control-label" })
                                        <div class="col-sm-8 input-group">
                                            @Html.TextBoxFor(m => m.SRDate, new { @class = "form-control date", @Value = DateTime.Now.ToString("dd-MM-yyyy") })
                                            @Html.ValidationMessageFor(m => m.SRDate, "", new { @style = "color: red" })
                                            <div class="input-group-addon">
                                                <i class="fa fa-calendar"></i>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.Description, new { @class = "col-md-4 control-label" })
                                        <div class="col-sm-8" style="padding-left: 0%; padding-right: 0%;">
                                            @Html.TextAreaFor(m => m.Description, new { @class = "form-control" })
                                            @Html.ValidationMessageFor(m => m.Description, "", new { @style = "color: red" })
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="box ">
                                    <div class="box-body">
                                        <div class="col-md-1">

                                        </div>
                                        <div class="col-md-2">
                                            <div class="form-group">
                                                @Html.LabelFor(m => m.TotalQty, new { @class = "col-md-4 control-label" })
                                                <div class="col-sm-8">
                                                    @Html.TextBoxFor(m => m.TotalQty, new { @class = "form-control", @disabled = "disabled" })
                                                    @Html.ValidationMessageFor(m => m.TotalQty, "", new { @style = "color: red" })
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-2">
                                            <div class="form-group">
                                                @Html.LabelFor(m => m.TotalValue, new { @class = "col-md-4 control-label" })
                                                <div class="col-sm-8">
                                                    @Html.TextBoxFor(m => m.TotalValue, new { @class = "form-control", @disabled = "disabled" })
                                                    @Html.ValidationMessageFor(m => m.TotalValue, "", new { @style = "color: red" })
                                                </div>
                                            </div>
                                        </div>
                                        
                                        <div class="col-md-2">
                                            <div class="form-group">
                                                @Html.LabelFor(m => m.TotalVatAmount, new { @class = "col-md-4 control-label" })
                                                <div class="col-sm-8">
                                                    @Html.TextBoxFor(m => m.TotalVatAmount, new { @class = "form-control", @disabled = "disabled" })
                                                    @Html.ValidationMessageFor(m => m.TotalVatAmount, "", new { @style = "color: red" })
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-2">
                                            <div class="form-group">
                                                @Html.LabelFor(m => m.TotalDiscountAmount, new { @class = "col-md-4 control-label" })
                                                <div class="col-sm-8">
                                                    @Html.TextBoxFor(m => m.TotalDiscountAmount, new { @class = "form-control", @disabled = "disabled" })
                                                    @Html.ValidationMessageFor(m => m.TotalDiscountAmount, "", new { @style = "color: red" })
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-2">
                                            <div class="form-group">
                                                @Html.LabelFor(m => m.TotalRtnAmount, "Total Net Return", new { @class = "col-md-4 control-label" })
                                                <div class="col-sm-8">
                                                    @Html.TextBoxFor(m => m.TotalRtnAmount, new { @class = "form-control", @disabled = "disabled" })
                                                    @Html.ValidationMessageFor(m => m.TotalRtnAmount, "", new { @style = "color: red" })
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-1">

                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="box ">
                                    <div class="box-body">
                                        <div class="col-md-2">

                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-group">
                                                @Html.LabelFor(m => m.ItemID, new { @class = "col-md-4 control-label" })
                                                <div class="col-sm-8">
                                                    @Html.DropDownListFor(m => m.ItemID, (IEnumerable<SelectListItem>)ViewBag.Item, new { @class = "form-control select2" })
                                                    @Html.ValidationMessageFor(m => m.ItemID, "", new { @style = "color: red" })
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                @Html.LabelFor(m => m.ReturnQty, new { @class = "col-md-4 control-label" })
                                                <div class="col-sm-8">
                                                    @Html.TextBoxFor(m => m.ReturnQty, new { @class = "form-control", @type = "Number" })
                                                    @Html.ValidationMessageFor(m => m.ReturnQty, "", new { @style = "color: red" })
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                @Html.LabelFor(m => m.Price, new { @class = "col-md-4 control-label" })
                                                <div class="col-sm-8">
                                                    @Html.TextBoxFor(m => m.Price, new { @class = "form-control", @type = "Number" })
                                                    @Html.ValidationMessageFor(m => m.Price, "", new { @style = "color: red" })
                                                </div>
                                            </div>
                                          
                                                <div class="form-group">
                                                    @Html.LabelFor(m => m.ClmCostPrice, new { @class = "col-md-4 control-label" })
                                                    <div class="col-sm-8">
                                                        @Html.TextBoxFor(m => m.ClmCostPrice, new { @class = "form-control" })
                                                        @Html.ValidationMessageFor(m => m.ClmCostPrice, "", new { @style = "color: red" })
                                                    </div>
                                                </div>
                                       
                                            <div class="form-group">
                                                @Html.LabelFor(m => m.Value, "Return Amount", new { @class = "col-md-4 control-label" })
                                                <div class="col-sm-8">
                                                    @Html.TextBoxFor(m => m.Value, new { @class = "form-control", @type = "Number", @disabled = "disabled" })
                                                    @Html.ValidationMessageFor(m => m.Value, "", new { @style = "color: red" })
                                                </div>
                                            </div>
                                            <div class="col-md-12" style="padding-right:0%; padding-left:19%">
                                                <div class="col-md-6">
                                                    <div class="form-group">
                                                        @Html.LabelFor(m => m.VatPer, "Vat (%)", new { @class = "col-md-4 control-label" })
                                                        <div class="col-sm-8">
                                                            @Html.TextBoxFor(m => m.VatPer, new { @class = "form-control", @type = "Number" })
                                                            @Html.ValidationMessageFor(m => m.VatPer, "", new { @style = "color: red" })
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="col-md-6" style="padding-right:0%">
                                                    <div class="form-group">
                                                        @Html.LabelFor(m => m.DisPer, "Discount (%)", new { @class = "col-md-5 control-label" })
                                                        <div class="col-sm-7">
                                                            @Html.TextBoxFor(m => m.DisPer, new { @class = "form-control", @type = "Number" })
                                                            @Html.ValidationMessageFor(m => m.DisPer, "", new { @style = "color: red" })
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-12" style="padding-right:0%; padding-left:19%">
                                                <div class="col-md-6">
                                                    <div class="form-group">
                                                        @Html.LabelFor(m => m.VatAmount, "Vat", new { @class = "col-md-4 control-label" })
                                                        <div class="col-sm-8">
                                                            @Html.TextBoxFor(m => m.VatAmount, new { @class = "form-control", @type = "Number", @disabled = "disabled" })
                                                            @Html.ValidationMessageFor(m => m.VatAmount, "", new { @style = "color: red" })
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="col-md-6" style="padding-right:0%">
                                                    <div class="form-group">
                                                        @Html.LabelFor(m => m.DiscountAmount, "Discount", new { @class = "col-md-4 control-label" })
                                                        <div class="col-sm-8">
                                                            @Html.TextBoxFor(m => m.DiscountAmount, new { @class = "form-control", @type = "Number", @disabled = "disabled" })
                                                            @Html.ValidationMessageFor(m => m.DiscountAmount, "", new { @style = "color: red" })
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                @Html.LabelFor(m => m.NetAmount, "Net Amount", new { @class = "col-md-4 control-label" })
                                                <div class="col-sm-8">
                                                    @Html.TextBoxFor(m => m.NetAmount, new { @class = "form-control", @type = "Number", @disabled = "disabled" })
                                                    @Html.ValidationMessageFor(m => m.NetAmount, "", new { @style = "color: red" })
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-1" style="padding-left:1%; padding-top:17.6%;">
                                            <button type="button" id="addToGrid" name="addToGrid" style="height:30%; font-size:100%;" class="btn">Add To Grid</button>
                                        </div>
                                        <div class="col-md-3">

                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="box ">
                                    <div class="box-header with-border box-head-back">
                                        <h3 class="box-title">Return Sale Item List</h3>
                                    </div>
                                    <div class="box-body">
                                        <table class="table table-responsive" id="DSIAlist">
                                            <thead>
                                                <tr>
                                                    <th>Item Name</th>
                                                    <th>Return Qty</th>
                                                    <th>Price</th>
                                                    <th>Unit Cost</th>
                                                    <th>Value</th>
                                                    <th>Vat</th>
                                                    <th>Discount</th>
                                                    <th>Net Amount</th>
                                                    <th>Action</th>
                                                </tr>
                                            </thead>
                                            <tbody></tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group">
                                    <div class="col-md-2"></div>
                                    <div class="col-md-8" style="text-align:center;">
                                        <input type="button" value="Save" id="save" class="btn skin-blue" style="padding-left:20px;" />
                                        <input type="button" name="update" id="update" value="Update" class="btn skin-blue" />
                                        <input type="button" name="delete" id="delete" value="Delete" class="btn skin-blue" />
                                        <input type="button" name="clear" id="clear" value="Clear" class="btn skin-blue" />
                                        <input type="button" name="refresh" id="refresh" value="Refresh" class="btn skin-blue" />
                                        <input type="button" name="print" id="print" value="Print" class="btn skin-blue" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<input type="hidden" id="discountPer" />
<input type="hidden" id="price" />


@section scripts
{
    <script src="~/Scripts/Common.js"></script>
    <script src="~/Scripts/SalesModule/SalesReturnPreviousInputFocus.js"></script>
    <script>
        var itemId = "";
        var custId = "";
        var tsoId = "";
        var storeId = "";
        var vatPer = "";
        var disPer = "";
        var changePrice = "";
        $(document).ready(function () {
            $("#update").hide();
            $("#delete").hide();
            $("#clear").hide();
            $("#print").hide();
            $("#InvoiceNo").focus();
            $("#BranchId").val(@ViewBag.DepotId).change();
            $("#ItemID").prop('disabled', true);
        });

        EnterPress();

        $('.date').datepicker({
            autoclose: true,
            format: 'dd-mm-yyyy',
        });

        var table = $('#DSIAlist').DataTable({
            'paging': false,
            'lengthChange': false,
            'searching': true,
            'ordering': true,
            'info': true,
            'autoWidth': false
        });

        $(".select2").select2();
        var addedItems = [];
        var isValid = true;
        //var isSearch = false;
        var salesReturn = { SRNo: 0, SRDate: "", InvoiceNo: 0, CustomerId: 0, BranchId: 0, Store: 0, Description: 0, TotalRtnAmount: 0, TotalQty: 0, TotalVatAmount: 0, TotalDiscountAmount: 0, TSO: 0, ClmCostPrice:0}


        $(document).on('click', "#refresh", function () {
            location.reload();
        });

        // depotId Change
        $(document).on('change', "#BranchId", function () {
                var id = { id: $(this).val() };
                if (id.id != "") {
                    $.ajax({
                        url: '@Url.Action("GetStoreByDepotId", "DSIA")',
                        contentType: "application/json;charset=utf-8",
                        data: JSON.stringify(id),
                        type: 'POST',
                        dataType: 'json',
                        success: function (datas) {

                            $("#TSO").empty();
                            $("#TSO").prop("disabled", false);
                            $("#Store").empty();
                            $("#Store").prop("disabled", false);

                            $.each(datas.Tso, function (index, value) {
                                $("#TSO").append($('<option />', {
                                    value: value.Value,
                                    text: value.Text
                                })).trigger('change');
                            });

                            $.each(datas.Store, function (index, value) {
                                $("#Store").append($('<option />', {
                                    value: value.Value,
                                    text: value.Text
                                })).trigger('change');
                            });

                            if(tsoId!="")
                            {
                                $("#TSO").val(tsoId).change();
                                tsoId = "";
                            }

                            if (storeId != "") {
                                $("#Store").val(storeId).change();
                                storeId = "";
                            }

                        }
                    });
                }
                else {
                    $("#TSO").empty();
                    $("#TSO").prop("disabled", true);
                    $("#Store").empty();
                    $("#Store").prop("disabled", true);
                }

           });

        //tso change reaction
        $(document).on('change', "#TSO", function () {
            $("#CustomerId").prop('disabled', false);
                var id = { tsoId: $(this).val() };
                if (id.tsoId != "") {
                    $.ajax({
                        url: '@Url.Action("GetCustomerByTsoId", "SalesReturnPrevious")',
                        contentType: "application/json;charset=utf-8",
                        data: id,
                        type: 'GET',
                        dataType: 'json',
                        success: function (datas) {

                            $("#CustomerId").empty();
                            $("#CustomerId").prop("disabled", false);
                            $.each(datas, function (index, value) {
                                $("#CustomerId").append($('<option />', {
                                    value: value.Value,
                                    text: value.Text
                                })).trigger('change');
                            });
                            $("#CustomerId").focus();
                            if (custId != "") {
                                $("#CustomerId").val(custId).change();
                                custId = "";
                            }
                        }
                    });
                }
                else {
                    $("#CustomerId").val("").change();
                    $("#CustomerId").prop("disabled", true);
                }
        });

        $(document).on('change', "#Store", function () {
            if ($(this).val() != "") {
                $("#ItemID").prop('disabled', false);
            }
        });

        $(document).on('change', "#ItemID", function () {
            $("#ReturnQty").val("");
            $("#VatAmount").val("");
            $("#DiscountAmount").val("");
            $("#Value").val("");
            $("#NetAmount").val("");
            RemoveError();
            var id = { itemId: $(this).val(), storeId: $("#Store").val() };
                $.ajax({
                       url: '@Url.Action("GetItemRemainQty", "Sales")',
                       contentType: "application/json;charset=utf-8",
                       data: id,
                       type: 'GET',
                       dataType: 'json',
                       success: function (datas) {
                           if (vatPer == "") {
                               $("#VatPer").val(datas.Vat);
                           }
                           else {
                               $("#VatPer").val(vatPer);
                           }
                           if (disPer == "") {
                               $("#DisPer").val(datas.Discount);
                           }
                           else {
                               $("#DisPer").val(disPer);
                           }
                           if (changePrice == "") {
                               $("#Price").val(datas.Price);
                           }
                           else {
                               $("#Price").val(changePrice);
                               changePrice = "";
                           }
                       }
                });
        });

        $(document).on('focusout', "#ReturnQty", function () {
            if ($(this).val() == "") {
                $("#Value").val(0);
                $("#VatAmount").val(0);
                $("#DiscountAmount").val(0);
            }
            else {
                var qty = $("#ReturnQty").val();
                var p = $("#Price").val();
                var value = qty * p;
                var vat = value * $("#VatPer").val() / 100;
                var dis = value * $("#DisPer").val() / 100;
                $("#Value").val(value.toFixed(2));
                $("#VatAmount").val(vat.toFixed(2));
                $("#DiscountAmount").val(dis.toFixed(2));
                $("#NetAmount").val((value + vat - dis).toFixed(2));
            }
        });

        $(document).on('focusout', "#Price", function () {
            var qty = $("#ReturnQty").val();
            var p = $("#Price").val();
            var value = qty * p;
            var vat = value * $("#VatPer").val() / 100;
            var dis = value * $("#DisPer").val() / 100;
            $("#Value").val(value.toFixed(2));
            $("#VatAmount").val(vat.toFixed(2));
            $("#DiscountAmount").val(dis.toFixed(2));
            $("#NetAmount").val((value + vat - dis).toFixed(2));
        });

        $(document).on('focusout', "#VatPer", function () {
            if ($(this).val() == "") {
                $("#VatAmount").val(0);
            }
            else {
                var vat = parseFloat($("#Value").val() * $("#VatPer").val() / 100).toFixed(2);
                var val = parseFloat($("#Value").val()) + parseFloat(vat);
                $("#VatAmount").val(vat);
                $("#NetAmount").val((parseFloat(val) - parseFloat($("#DiscountAmount").val())).toFixed(2));
            }
        });

        $(document).on('focusout', "#DisPer", function () {
            if ($(this).val() == "") {
                $("#DiscountAmount").val(0);
            }
            else {
                var dis = parseFloat($("#Value").val() * $("#DisPer").val() / 100).toFixed(2);
                var val = parseFloat($("#Value").val()) - parseFloat(dis);
                $("#DiscountAmount").val(dis);
                $("#NetAmount").val((parseFloat(val) + parseFloat($("#VatAmount").val())).toFixed(2));
            }
        });

        $(document).on('click', "#addToGrid", function () {
            $("#ItemID").prop('disabled', false);
            RemoveError();
            var item = { SRNo: 0, ItemID: 0, ReturnQty: 0, VatAmount: 0, DiscountAmount: 0, Value: 0, ValueWVD: 0, Price: 0, ItemName: "", RtnOfferQty: 0, SalesQty: 0, OfferQty: 0, ClmCostPrice:0}
            ValidateAddToGrid();
            if (isValid == true) {
                item.ItemName = $("#ItemID :selected").text();
                item.ItemID = $("#ItemID").val();
                item.ReturnQty = $("#ReturnQty").val();
                item.Value = $("#NetAmount").val();
                item.ValueWVD = $("#Value").val();
                item.Price = $("#Price").val();
                item.VatAmount = $("#VatAmount").val();
                item.DiscountAmount = $("#DiscountAmount").val();
                item.ClmCostPrice = $("#ClmCostPrice").val();
                addedItems.push(item);
                ClearOnSearch();
                ShowOnTable();
            }
        });

        //delete Row
        $(document).on('click', '[name="deleteRow"]', function () {
            var item = $(this).attr("value");
            var newItem = [];
            if (confirm('Are you sure you want to delete this from Grid ?')) {
                $.each(addedItems, function (index, value) {
                    if (value.ItemID == item) {

                    }
                    else {
                        newItem.push(value);
                    }

                });
                addedItems = newItem;
                ShowOnTable();
            }
        });

        //edit Row
        $(document).on('click', '[name="editRow"]', function () {
            $("#ItemID").prop('disabled', true);
            var item = $(this).attr("value");
            var newItem = [];
            $.each(addedItems, function (index, value) {
                if (value.ItemID == item) {

                    $("#ItemID").val(item).change();
                    $("#ReturnQty").val(value.ReturnQty);
                    $("#Value").val(value.ValueWVD);
                    $("#VatAmount").val(value.VatAmount);
                    $("#DiscountAmount").val(value.DiscountAmount);
                    $("#NetAmount").val(value.Value);
                    $("#Price").val(value.Price);
                    $("#ClmCostPrice").val(value.ClmCostPrice);
                    changePrice = value.Price;
                    vatPer = ((value.VatAmount * 100) / value.ValueWVD).toFixed(2);
                    disPer = ((value.DiscountAmount * 100) / value.ValueWVD).toFixed(2);
                }
                else {
                    newItem.push(value);
                }

            });
            addedItems = newItem;
            ShowOnTable();
        });

        $(document).on('click', "#save", function () {
            RemoveError();
            $("#save").prop('disabled', true);
            SetSalesReturn();
            if (addedItems.length <= 0) {
                alert("At least One Item should be added for save.");
                $("#save").prop('disabled', false);
            }
            else {
                ValidateSalesReturn();
                if (isValid == true) {
                    if (confirm('Do you want to save')) {
                        $.ajax({
                            url: '@Url.Action("SaveSalesReturn", "SalesReturnPrevious")',
                            contentType: "application/json;charset=utf-8",
                            data: JSON.stringify({ salesReturn: salesReturn, addedItems: addedItems }),
                            type: 'POST',
                            dataType: 'json',
                            success: function (datas) {
                                if (datas == 0) {
                                    alert("Failed To Saved.");
                                    $("#save").prop('disabled', false);
                                }
                                else {
                                    alert("Sucessfully Saved.");
                                    $("#SRNo").val(datas.srNo);
                                    $("#save").prop('disabled', true);
                                    $("#print").show();
                                }
                            }
                        });
                    }
                    else {
                        $("#save").prop('disabled', false);
                    }
                }
                else {
                    $("#save").prop('disabled', false);
                }
            }
        });

        //search code
        $(document).on('click', '#srSearch', function () {
            $("#print").show();
            $("#InvoiceNo").prop('disabled', true);
            var id = { id: $("#SRNo").val() };
            ClearOnSearch();
            if ($("#SRNo").val() != "") {
                $.ajax({
                    url: '@Url.Action("GetSalesReturnById", "SalesReturnPrevious")',
                    contentType: "application/json;charset=utf-8",
                    data: id,
                    type: 'GET',
                    dataType: 'json',
                    success: function (datas) {

                        if (datas == 0) {
                            alert("Your entered SRNo No. Doesn't exist.");
                        }
                        else if (datas.srItem.IsPrevious == false) {
                            alert("Your entered SRNo No. Doesn't exist.");
                        }
                        else {
                            $("#save").hide();
                            $("#update").show();
                            $("#delete").show();

                            $("#SRDate").val((moment(datas.srItem.SRDate).format("DD-MM-YYYY")));
                            $("#InvoiceNo").val(datas.srItem.InvoiceNo);
                            $("#Description").val(datas.srItem.Description);
                            $("#TSO").val(datas.srItem.TSO).change();
                            $("#ClmCostPrice").val(data.srItem.ClmCostPrice);
                            tsoId = datas.srItem.TSO;
                            $("#Store").val(datas.srItem.Store).change();
                            storeId = datas.srItem.Store;
                            $("#CustomerId").val(datas.srItem.CustomerId).change();
                            custId = datas.srItem.CustomerId;
                            $("#TotalQty").val(datas.srItem.TotalQty);
                            $("#TotalRtnAmount").val(datas.srItem.TotalRtnAmount);

                            addedItems = [];
                            $.each(datas.srLineItem, function (index, value) {
                                var item = { SRNo: 0, ItemID: 0, ReturnQty: 0, VatAmount: 0, DiscountAmount: 0, Value: 0, ValueWVD: 0, Price: 0, ItemName: "", RtnOfferQty: 0, SalesQty: 0, OfferQty: 0, ClmCostPrice:0 }
                                item.ItemName = value.ItemName;
                                item.ItemID = value.ItemID;
                                item.ReturnQty = value.ReturnQty;
                                item.RtnOfferQty = value.RtnOfferQty;
                                item.Price = value.Price;
                                item.Value = value.Value;
                                item.ValueWVD = (value.Value + value.DiscountAmount - value.VatAmount).toFixed(2);
                                item.VatAmount = value.VatAmount;
                                item.DiscountAmount = value.DiscountAmount;
                                item.SalesQty = value.SalesQty;
                                item.OfferQty = value.OfferQty;
                                item.ClmCostPrice = value.ClmCostPrice;
                                addedItems.push(item);
                            });
                            $("#inSearch").click();
                            ShowOnTable();
                        }
                    },
                    error: function () {
                        alert("Please check your internet connection first. If this doesn't solve your problem, then Contact With Paankouri Software & Services");
                    }
                });
            }
            else {
                alert("Please Enter a SrNo To Search.");
            }

        });

        //update code
        $(document).on('click', "#update", function () {
            RemoveError();
            $("#update").prop('disabled', true);
            SetSalesReturn();
            salesReturn.SRNo = $("#SRNo").val();
            if (addedItems.length <= 0) {
                alert("At least One Item should be added for Update.");
                $("#update").prop('disabled', false);
            }
            else {
                ValidateSalesReturn();
                if (confirm('Do you want to Update')) {
                    if (isValid == true) {
                    $.ajax({
                        url: '@Url.Action("UpdateSalesReturn", "SalesReturnPrevious")',
                        contentType: "application/json;charset=utf-8",
                        data: JSON.stringify({ salesReturn: salesReturn, addedItems: addedItems }),
                        type: 'POST',
                        dataType: 'json',
                        success: function (datas) {
                            if (datas == 0) {
                                alert("Failed To Update.");
                                $("#update").prop('disabled', false);
                            }
                            else {
                                alert("Sucessfully Updated.");
                                $("#update").prop('disabled', true);
                            }
                        }
                    });
                }
                    else {
                        $("#update").prop('disabled', false);
                    }
                }
                else {
                    $("#update").prop('disabled', false);
                }
            }
        });
        $(document).on('click', "#print", function (event) {
            event.preventDefault();
            $("#report").attr("action", "/SalesReturn/SalesReturnPreview")
            $("#report").submit();
        });
        $(document).on('click', "#delete", function () {
            $("#update").prop('disabled', true);
            $("#delete").prop('disabled', true);
            var id = $("#SRNo").val();
            if (confirm('Are you sure you want to delete this from the database?')) {
                $.ajax({
                    url: '@Url.Action("DeleteSalesReturnByid", "SalesReturnPrevious")',
                    contentType: "application/json;charset=utf-8",
                    data: { id: id },
                    type: 'GET',
                    dataType: 'json',
                    success: function (datas) {
                        if (datas == 0) {
                            alert("Delete failed.");
                            $("#delete").prop('disabled', false);
                            $("#update").prop('disabled', false);
                        }
                        else {
                            alert("Delete Successfull");
                            location.reload();
                        }
                    }
                });
            }
            else {
                $("#update").prop('disabled', false);
                $("#delete").prop('disabled', false);
            }
        });

        //data table fill up
        function ShowOnTable() {
            table.clear().draw();
            var totQty = 0;
            var netAmount = 0;
            var totAmount = 0;
            var totVat = 0;
            var totDiscount = 0;
            $.each(addedItems, function (index, value) {
                table.row.add([value.ItemName, value.ReturnQty, value.Price, value.ClmCostPrice, value.ValueWVD, value.VatAmount, value.DiscountAmount, value.Value,
                '<a href="#"><i class="fa fa-edit" name="editRow" value="' +
                    value.ItemID + '"></i></a> &ensp;&ensp;&ensp;<a href="#"><i class="fa fa-trash" name="deleteRow" value="' + value.ItemID + '"></i></a>']).draw();
                totQty += parseFloat(value.ReturnQty);
                netAmount += parseFloat(value.Value);
                totAmount += parseFloat(value.ValueWVD);
                totVat += parseFloat(value.VatAmount);
                totDiscount += parseFloat(value.DiscountAmount);
            });
            $("#TotalQty").val(totQty.toFixed(2));
            $("#TotalRtnAmount").val(netAmount.toFixed(2));
            $("#TotalValue").val(totAmount.toFixed(2));
            $("#TotalVatAmount").val(totVat.toFixed(2));
            $("#TotalDiscountAmount").val(totDiscount.toFixed(2));
        }

        function ValidateAddToGrid() {
            isValid = true;
            if ($("#ReturnQty").val() == "") {
                setError("ReturnQty", "Return Qty is required field");
                isValid = false;
            }
            if ($("#ReturnQty").val() <= 0) {
                setError("ReturnQty", "Return Qty must be grater than Zero");
                isValid = false;
            }
            if ($("#Value").val() == "") {
                setError("Value", "Return Amount is required field");
                isValid = false;
            }
            if ($("#Value").val() <= 0) {
                setError("Value", "Return Amount must be grater than Zero");
                isValid = false;
            }
            $.each(addedItems, function (index, value) {
                if (value.ItemID == $("#ItemID").val()) {
                    setError("ItemID", "This Item is Already Added.");
                    isValid = false;
                }
            });
        }

        function ClearOnSearch() {
            $("#ItemID").val("").change();
            $("#ReturnQty").val("");
            $("#Value").val("");
            $("#VatPer").val("");
            $("#DisPer").val("");
            $("#NetAmount").val("");
            $("#Price").val("");
            $("#ClmCostPrice").val("");
            itemId = "";
        }

        function SetSalesReturn() {
            salesReturn.SRNo = 0;
            salesReturn.SRDate = $("#SRDate").val();
            salesReturn.InvoiceNo = $("#InvoiceNo").val();
            salesReturn.CustomerId = $("#CustomerId").val();
            salesReturn.BranchId = $("#BranchId").val();
            salesReturn.Store = $("#Store").val();
            salesReturn.Description = $("#Description").val();
            salesReturn.TotalRtnAmount = $("#TotalRtnAmount").val();
            salesReturn.TotalQty = $("#TotalQty").val();
            salesReturn.TotalVatAmount = $("#TotalVatAmount").val();
            salesReturn.TotalDiscountAmount = $("#TotalDiscountAmount").val();
            salesReturn.ClmCostPrice = $("#ClmCostPrice").val();
            salesReturn.TSO = $("#TSO").val();
        }

        function ValidateSalesReturn() {
            isValid = true;
            if (salesReturn.SRDate == "") {
                setError("SRDate", "Date is required field");
                isValid = false;
            }
            if (salesReturn.CustomerId == "") {
                setError("CustomerId", "Customer is required field");
                isValid = false;
            }
            if (salesReturn.BranchId == "") {
                setError("BranchId", "Depot is required field");
                isValid = false;
            }
            if (salesReturn.Store == "") {
                setError("Store", "Store is required field");
                isValid = false;
            }
        }


    </script>

}



