@model BEEERP.Models.PaymentReceiveInfo.RevPaymentVModel
@using BEEERP.Models.SystemSetting;
@using BEEERP.Models.CommonInformation
@{
    ViewBag.Title = "CustomerVouchar";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<form id="report" target="_blank">
    <div class="content">
        <div class="row">
            <div class="form-horizontal">
                <div class="col-md-10">
                    <h4 style="text-align:left">Customer Receive Voucher</h4>
                    <div class="box-body">
                        <div class="col-md-12">
                            <div class="box ">
                                <div class="box-body">
                                    <div class="col-md-4">
                                        <div class="form-group">
                                            @Html.LabelFor(m => m.RPID, new { @class = "col-md-4 control-label" })
                                            <div class="input-group input-group-sm col-md-8" style="padding-right:19px;padding-left:14px;">
                                                @Html.TextBoxFor(m => m.RPID, new { @class = "form-control" })
                                                @Html.ValidationMessageFor(m => m.RPID)
                                                <span class="input-group-btn">
                                                    <button type="button" class="btn skin-blue btn-flat" id="searchRPID">Search</button>
                                                </span>
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            @Html.LabelFor(m => m.DepotId, "Depot", new { @class = "col-md-4 control-label" })
                                            <div class="col-sm-8">
                                                @Html.DropDownListFor(m => m.DepotId, (IEnumerable<SelectListItem>)ViewBag.DepotId, new { @class = "form-control select2" })
                                                @Html.ValidationMessageFor(m => m.DepotId)
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <div class="col-sm-4"></div>
                                            <div class="col-sm-8 ">
                                                <br />
                                                <label for="advance">Advance</label>&ensp;&ensp;
                                                <input type="radio" id="advance" name="paymentType" value="advance" checked />&ensp;&ensp;&ensp;&ensp;&ensp;
                                                <label for="sales">Sales</label>&ensp;&ensp;
                                                <input type="radio" id="sales" name="paymentType" value="sales" />
                                            </div>

                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="form-group">
                                            @Html.LabelFor(m => m.CustomerID, new { @class = "col-md-4 control-label" })
                                            <div class="input-group input-group-sm" style="padding-right:19px;padding-left:14px;">
                                                @Html.TextBoxFor(m => m.CustomerID, new { @class = "form-control" })
                                                @Html.ValidationMessageFor(m => m.CustomerID)
                                                <span class="input-group-btn">
                                                    <button type="button" class="btn skin-blue btn-flat" id="searchCustomer">Go!</button>
                                                </span>
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            @Html.LabelFor(m => m.CustomerName, new { @class = "col-md-4 control-label" })
                                            <div class="col-sm-8">
                                                @Html.TextBoxFor(m => m.CustomerName, new { @class = "form-control", @readonly = "readonly", @id = "CustName" })
                                                @Html.ValidationMessageFor(m => m.CustomerName)
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            @Html.LabelFor(m => m.ZoneId, new { @class = "col-md-4 control-label" })
                                            <div class="col-sm-8">
                                                @Html.TextBoxFor(m => m.ZoneId, new { @class = "form-control", @readonly = "readonly" })
                                                @Html.ValidationMessageFor(m => m.ZoneId)
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            @Html.LabelFor(m => m.Area, new { @class = "col-md-4 control-label" })
                                            <div class="col-sm-8">
                                                @Html.TextBoxFor(m => m.Area, new { @class = "form-control", @readonly = "readonly" })
                                                @Html.ValidationMessageFor(m => m.Area)
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="form-group">
                                            @Html.LabelFor(m => m.TDate, new { @class = "col-md-4 control-label" })
                                            <div class="col-sm-8 input-group" style="padding-left:15px; padding-right:15px">
                                                @Html.TextBoxFor(m => m.TDate, new { @class = "form-control date", @Value = DateTime.Now.ToString("dd-MM-yyyy") })
                                                <div class="input-group-addon">
                                                    <i class="fa fa-calendar"></i>
                                                </div>
                                                @*@Html.ValidationMessageFor(m => m.TDate)*@
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            @Html.LabelFor(m => m.Due, new { @class = "col-md-4 control-label" })
                                            <div class="col-sm-8">
                                                @Html.TextBoxFor(m => m.Due, new { @class = "form-control", @readonly = "readonly" })
                                                @Html.ValidationMessageFor(m => m.Due)
                                            </div>
                                        </div>

                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-12">
                            <div class="box ">
                                <div class="box-header with-border box-head-back">
                                    <h3 class="box-title">Receivable Amount</h3>
                                </div>
                                <div class="box-body">
                                    <div class="col-md-10 ">
                                        <table class="table table-responsive" id="salesGrid">
                                            <thead>
                                                <tr>
                                                    <th><input type="checkbox" id="select_all" name="select_all" /></th>
                                                    <th>Invoice No</th>
                                                    <th>Amount</th>
                                                    <th>Adjusted Amount</th>
                                                </tr>
                                            </thead>
                                            <tbody></tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-12">
                            <div class="box ">
                                <div class="box-body">
                                    <div class="col-md-4">
                                        <div class="form-group">
                                            @Html.LabelFor(m => m.AccountID, "Select A/C", new { @class = "col-md-4 control-label" })
                                            <div class="col-sm-8">
                                                @Html.DropDownListFor(m => m.AccountID, (IEnumerable<SelectListItem>)ViewBag.Account, new { @class = "form-control select2" })
                                                @Html.ValidationMessageFor(m => m.AccountID)
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            @Html.LabelFor(m => m.RefNo, new { @class = "col-md-4 control-label" })
                                            <div class="col-sm-8">
                                                @Html.TextBoxFor(m => m.RefNo, new { @class = "form-control" })
                                                @Html.ValidationMessageFor(m => m.RefNo)
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            @Html.LabelFor(m => m.Description, new { @class = "col-md-4 control-label" })
                                            <div class="col-sm-8">
                                                @Html.TextAreaFor(m => m.Description, new { @class = "form-control" })
                                                @Html.ValidationMessageFor(m => m.Description)
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="form-group">
                                            @Html.LabelFor(m => m.ReceiveAmt, new { @class = "col-md-4 control-label" })
                                            <div class="col-sm-8">
                                                @Html.TextBoxFor(m => m.ReceiveAmt, new { @class = "form-control", @type = "number" })
                                                @Html.ValidationMessageFor(m => m.ReceiveAmt)
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            @Html.LabelFor(m => m.NetAmount, new { @class = "col-md-4 control-label" })
                                            <div class="col-sm-8">
                                                @Html.TextBoxFor(m => m.NetAmount, new { @class = "form-control", @readonly = "readonly", @type = "number" })
                                                @Html.ValidationMessageFor(m => m.NetAmount)
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="form-group">
                                            @Html.LabelFor(m => m.BankCharges, new { @class = "col-md-4 control-label" })
                                            <div class="col-sm-8">
                                                @Html.TextBoxFor(m => m.BankCharges, new { @class = "form-control", @type = "number" })
                                                @Html.ValidationMessageFor(m => m.BankCharges)
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-8">
                            <div class="form-group form-horizontal" style="text-align:center;">
                                <button type="button" id="save" style="height:33px; font-size:13px;" class="btn">Save</button>
                                @if (UserAccessAction.HavePerOnSave)
    {

    }

                                <button type="button" id="cancel" style="height:33px; font-size:13px;" class="btn">Cancel</button>
                                <button type="button" id="refresh" style="height:33px; font-size:13px;" class="btn">Refresh</button>
                                <input type="button" name="print" id="print" value="Print" class="btn skin-blue" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    </form>

    @section scripts{
        <script src="~/Scripts/Search.js"></script>
        <script>
        $(document).ready(function () {
            $('.date').datepicker({
                autoclose: true,
                format:"dd-mm-yyyy"
            });
            var accountID = "";
            var invoiceList = [];
            var selectedInvoice = [];
            $(".select2").select2();
            var rows_selected = [];
            SearchCustomer();
            var isSearch = false;
            var table = $('#salesGrid').DataTable({

                'columnDefs': [{
                    'targets': 0,
                    'searchable': false,
                    'width': '1%',
                    'className': 'dt-body-center',
                    "paging": false,
                    'render': function (data, type, full, meta) {
                        return '<input type="checkbox">';
                    },
                }],
                'order': [[1, 'asc']],
                'rowCallback': function (row, data, dataIndex) {
                    // Get row ID
                    var rowId = data[0];

                    // If row ID is in the list of selected row IDs
                    if ($.inArray(rowId, rows_selected) !== -1) {
                        $(row).find('input[type="checkbox"]').prop('checked', true);
                        $(row).addClass('selected');
                    }
                }
            });

            $(document).on('click', "#print", function (event) {
                event.preventDefault();
                if ($("#message").val() != "true") {
                    $("#report").attr("action", "/PaymentVouchar/GetCustomerRVPreview")
                    $("#report").submit();
                }
            });
            function updateDataTableSelectAllCtrl(table) {
                var $table = table.table().node();
                var $chkbox_all = $('tbody input[type="checkbox"]', $table);
                var $chkbox_checked = $('tbody input[type="checkbox"]:checked', $table);
                var chkbox_select_all = $('thead input[name="select_all"]', $table).get(0);

                // If none of the checkboxes are checked
                if ($chkbox_checked.length === 0) {
                    chkbox_select_all.checked = false;
                    if ('indeterminate' in chkbox_select_all) {
                        chkbox_select_all.indeterminate = false;
                    }

                    // If all of the checkboxes are checked
                } else if ($chkbox_checked.length === $chkbox_all.length) {
                    chkbox_select_all.checked = true;
                    if ('indeterminate' in chkbox_select_all) {
                        chkbox_select_all.indeterminate = false;
                    }

                    // If some of the checkboxes are checked
                } else {
                    chkbox_select_all.checked = true;
                    if ('indeterminate' in chkbox_select_all) {
                        chkbox_select_all.indeterminate = true;
                    }
                }
            }
            $(document).on('focusout', "#BankCharges", function () {
                var bankCharge = $("#BankCharges").val();
                var netAmount = 0;
                var charge = 0;
                var amount = $("#ReceiveAmt").val();
                if (bankCharge == "") {
                    bankCharge = 0;
                }
                if (amount == "") {
                    amount = 0;
                }
                if (parseFloat(bankCharge) < parseFloat(amount)) {
                    netAmount = parseFloat((parseFloat(amount).toFixed(2)) - (parseFloat(bankCharge).toFixed(2)));
                    $("#NetAmount").val(netAmount);
                }
                else {
                    alert("Bank charge can not be greater than Amount");
                    $("#BankCharges").val(charge);
                    $("#NetAmount").val(amount);
                }
            });

            $(document).on('focusout', "#ReceiveAmt", function () {
                var amount = $("#ReceiveAmt").val();
                var bankCharge = $("#BankCharges").val();
                var netAmount = 0
                if ((bankCharge != "" || bankCharge != 0) && (amount != "" || amount != 0)) {
                    if (parseFloat(amount) > parseFloat(bankCharge)) {
                        netAmount = amount - bankCharge;
                    }
                    else {
                        alert("Receive amount cannot be less than Bank Charge");
                    }
                }
                else {
                    netAmount = amount;
                }
                $("#NetAmount").val(netAmount);
            });

            $(document).on('click', '#save', function () {
                var rcvPayInfo = { RPID: 0, CustomerID: 0.0, TDate: "", AccountID: "", RefNo: "", Description: "", ReceiveAmt: 0.0, NetAmount: 0.0, BankCharges: 0.0, Paymode: "", BranchId:0};
                rcvPayInfo.RPID = 0;
                rcvPayInfo.CustomerID = $("#CustomerID").val();
                rcvPayInfo.CustomerName = $("#CustomerName").val();
                rcvPayInfo.TDate = $("#TDate").val();
                rcvPayInfo.AccountID = $("#AccountID").val();
                rcvPayInfo.RefNo = $("#RefNo").val();
                rcvPayInfo.Description = $("#Description").val();
                rcvPayInfo.ReceiveAmt = $("#ReceiveAmt").val();
                rcvPayInfo.NetAmount = $("#NetAmount").val();
                rcvPayInfo.BankCharges = $("#BankCharges").val();
                rcvPayInfo.BranchId = $("#DepotId").val();
                rcvPayInfo.Paymode=$('[name="paymentType"]:checked').val();
                var totAmount=0.0;
                $.each(selectedInvoice,function(index,value){
                    totAmount=totAmount+value.AdjustedAmount;
                });
                if ($("#CustomerID").val() == "")
                {
                   alert("Customer Id Needed");
                }
                else if ($("#AccountID").val() == "")
                {
                   alert("AC Needed");
                }
                else if ($("#RefNo").val() == "")
                {
                   alert("Reference Needed");
                }
                else if ($("#ReceiveAmt").val() == "")
                {
                   alert("Amount Needed");
                }

                else
                {
                    if (totAmount < $("#ReceiveAmt").val() && rcvPayInfo.Paymode!="advance")
                    {
                        alert("Receive amount  cannot be greater than selected invoice amount.");
                    }
                    else{
                        if (selectedInvoice.length > 0 || rcvPayInfo.Paymode == "advance")
                        {
                            $.ajax({
                                url: '@Url.Action("SavePayMentRVouchar", "PaymentVouchar")',
                                contentType: "application/json;charset=utf-8",
                                data: JSON.stringify({ rcvPayInfo: rcvPayInfo, selectedInvoice: selectedInvoice }),
                                type: 'POST',
                                dataType: 'json',
                                success: function (datas) {
                                    if (datas == 0)
                                    {
                                        alert("Failed To Saved. All Field Required.");
                                        $("#save").show();
                                    }
                                    else {
                                        alert("Sucessfully Saved.");
                                        $("#RPID").val(datas);
                                        $("#save").hide();
                                    }
                                }

                            });
                        }
                        else{
                            alert("Please select at least one invoice");
                        }
                    }

                }
            });
            $(document).on('click', '#cancel', function () {
                if (confirm('Do you want to cancel')) {
                    var rcvPayInfo = { RPID: 0, CustomerID: 0.0, TDate: "", AccountID: "", RefNo: "", Description: "", ReceiveAmt: 0.0, NetAmount: 0.0, BankCharges: 0.0, Paymode: "", BranchId: 0 };
                    rcvPayInfo.RPID = $("#RPID").val();
                    rcvPayInfo.CustomerID = $("#CustomerID").val();
                    rcvPayInfo.CustomerName = $("#CustomerName").val();
                    rcvPayInfo.TDate = $("#TDate").val();
                    rcvPayInfo.AccountID = $("#AccountID").val();
                    rcvPayInfo.RefNo = $("#RefNo").val();
                    rcvPayInfo.Description = $("#Description").val();
                    rcvPayInfo.ReceiveAmt = $("#ReceiveAmt").val();
                    rcvPayInfo.NetAmount = $("#NetAmount").val();
                    rcvPayInfo.BankCharges = $("#BankCharges").val();
                    rcvPayInfo.BranchId = $("#DepotId").val();
                    rcvPayInfo.Paymode = $('[name="paymentType"]:checked').val();
                    var totAmount = 0.0;
                    $.each(selectedInvoice, function (index, value) {
                        totAmount = totAmount + value.AdjustedAmount;
                    });
                    if ($("#CustomerID").val() == "") {
                        alert("Customer Id Needed");
                    }
                    else if ($("#AccountID").val() == "") {
                        alert("AC Needed");
                    }
                    else if ($("#RefNo").val() == "") {
                        alert("Reference Needed");
                    }
                    else if ($("#ReceiveAmt").val() == "") {
                        alert("Amount Needed");
                    }

                    else {
                        if (totAmount < $("#ReceiveAmt").val() && rcvPayInfo.Paymode != "advance") {
                            alert("Receive amount  cannot be greater than selected invoice amount.");
                        }
                        else {
                            if (selectedInvoice.length > 0 || rcvPayInfo.Paymode == "advance") {
                                $.ajax({
                                    url: '@Url.Action("DeletePayMentRVouchar", "PaymentVouchar")',
                                    contentType: "application/json;charset=utf-8",
                                    data: JSON.stringify({ rcvPayInfo: rcvPayInfo }),
                                    type: 'POST',
                                    dataType: 'json',
                                    success: function (datas) {
                                        if (datas == 0) {
                                            alert("You can not delete this because It is adjusted.");

                                        }
                                        else if (datas == 1) {
                                            alert("Sucessfully deleted.");

                                        }
                                        else {
                                            alert("Please check your internet connection first. If this doesn't solve your problem, then Contact With Paankouri Software & Services")
                                        }
                                    }

                                });
                            }
                            else {
                                alert("Please select at least one invoice");
                            }
                        }

                    }
                }
            });

            $(document).on('click','#searchRPID', function () {
                $.ajax({
                    url: '@Url.Action("GetVoucharByRPID", "PaymentVouchar")',
                    contentType: "application/json;charset=utf-8",
                    data: { rpid: $("#RPID").val() },
                    type: 'GET',
                    dataType: 'json',
                    success: function (datas) {
                        if(datas==0)
                        {
                            $("#save").show();
                            $("#update").hide();
                            $("#cancel").hide();
                            alert("This Invoice no doesn't exist.");
                        }
                        else
                        {
                            $("#save").hide();
                            $("#DepotId").prop("disabled", true);
                            $("#TDate").val();
                            $("#CustomerID").val(datas.item.CustomerID);
                            $("#DepotId").val(datas.item.DepotId).change();
                            $("#CustomerName").val(datas.item.CustomerName);
                            $("#ZoneId").val(datas.item.ZoneName);
                            $("#Area").val(datas.item.Area);
                            $("#Due").val(0);
                            accountID = datas.item.AccName;
                            $("#RefNo").val(datas.item.RefNo);
                            $("#Description").val(datas.item.Description);
                            $("#ReceiveAmt").val(datas.item.ReceiveAmt)
                            $("#BankCharges").val(datas.item.BankCharges)
                            $("#NetAmount").val(datas.item.NetAmount);
                            if (datas.item.PayMode == "advance") {
                                $("#advance").prop('checked', true);
                            }
                            else if (datas.item.PayMode == "sales") {
                                $("#sales").prop('checked', true);
                            }
                            selectedInvoice = [];
                            invoiceList = [];
                            isSearch = true;
                            $.each(datas.LineItem, function (index, value) {
                                var item = { invoiceNumber: 0, invoiceAmount: 0.0, adjustedAmount: 0.0,DocType:"" };

                                if (value.DocType == "OB") {
                                    item.DocType = "OB";
                                    item.invoiceNumber = "OB";

                                }
                                else {
                                    item.DocType = "Sales";
                                    item.invoiceNumber = value.InvoiceNo;
                                }
                                item.invoiceAmount = value.AdjustedAmount;
                                item.adjustedAmount = value.AdjustedAmount;
                                selectedInvoice.push(item);
                                invoiceList.push(item);
                            });
                            ShowOnTable();

                            $("#searchCustomer").click();
                        }
                    }
                });
            });
            $(document).on('click', "#refresh", function () {
                location.reload();
            });

            $(document).on('change', "#DepotId", function () {
                ClearOnDepotChange();

                var id = { depot: $(this).val() };
                    if (id.depot != "") {
                    $.ajax({
                        url: '@Url.Action("GetAccountByDepotId", "PaymentVouchar")',
                        contentType: "application/json;charset=utf-8",
                        data: JSON.stringify(id),
                        type: 'POST',
                        dataType: 'json',
                        success: function (datas) {

                            $("#AccountID").empty();
                            $("#AccountID").prop("disabled", false);
                            $.each(datas, function (index, value) {
                                $("#AccountID").append($('<option />', {
                                    value: value.Value,
                                    text: value.Text
                                })).trigger('change');
                            });

                            if (accountID!="")
                            {
                                $("#AccountID").val(accountID).change();
                                accountID = "";
                            }

                        }
                    });
                }
                else {
                    $("#AccountID").empty();
                    $("#AccountID").prop("disabled", true);
                }

            });

            function ClearOnDepotChange() {
                $("#CustomerName").val("");
                $("#ZoneId ").val("");
                $("#Area").val("");
            }
            $(document).on('click', '#searchCustomer', function () {
                if (isSearch == false) {
                    SearchInvoice();
                }
                else {
                    isSearch = false;
                }

            });


            $(document).on("change", '[name="paymentType"]', function () {
                ClearOnPayModeChange();
                var selectedType=$(this).val();
                if(selectedType=="sales")
                {
                    SearchInvoice();
                }
                if(selectedType=="advance")
                {

                }

            });
            function SearchInvoice() {
                var  selectedType=$('[name="paymentType"]:checked').val();
                if(selectedType=="sales"&&$("#CustomerID").val()!=""&&$("#DepotId").val()!="")
                {
                    $.ajax({
                    url: '@Url.Action("GetInvoiceInfoByCustomerId", "PaymentVouchar")',
                    contentType: "application/json;charset=utf-8",
                    data: { custId: $("#CustomerID").val() },
                    type: 'GET',
                    dataType: 'json',
                    success: function (data) {
                        if (data == 0)
                        {
                            alert("Not found");
                        }
                        else {
                            invoiceList = [];
                            var sl = 0;
                            $.each(data.item, function (index, value) {
                                var item = { invoiceNumber: 0, invoiceAmount: 0.0, adjustedAmount: 0.0 };
                                sl = sl + 1;

                                item.invoiceAmount = value.InvoiceAmount;
                                if (value.DocType == "OB") {
                                    item.invoiceNumber = "OB";
                                }
                                else {
                                    item.invoiceNumber = value.InvoiceNo;
                                }
                                invoiceList.push(item);
                            });
                            ShowOnTable();

                        }
                    }
                });
                }
            }
            function ClearOnPayModeChange()
            {
                invoiceList=[];
                ShowOnTable();
            }
            $('#salesGrid tbody').on('click', 'input[type="checkbox"]', function (e) {
                var $row = $(this).closest('tr');
                var data = table.row($row).data();
                var rowId = data[0];
                var index = $.inArray(rowId, rows_selected);

                if (this.checked && index === -1) {
                    rows_selected.push(rowId);


                } else if (!this.checked && index !== -1) {
                    rows_selected.splice(index, 1);
                }
                var selectedItem={InvoiceNo:0,InvoiceAmount:0,AdjustedAmount:0,DocType:""};
                if (this.checked) {
                    $row.addClass('selected');
                    $('input[name="' + data[0] + '"]').val(data[2]);
                    selectedItem.InvoiceNo=data[0];
                    selectedItem.InvoiceAmount=data[2];
                    selectedItem.AdjustedAmount = data[2];
                    if (data[0] == "OB") {
                        selectedItem.DocType = "OB";
                        selectedItem.InvoiceNo = 0;
                    }
                    else {

                    }
                    selectedInvoice.push(selectedItem);
                    TotalSumOfCheckedInvoice();
                } else {
                    $row.removeClass('selected');
                    $('input[name="' + data[0] + '"]').val("");
                    var modifiedItem=[];
                    $.each(selectedInvoice,function(index,value){
                        if(value.InvoiceNo!=data[0])
                        {
                            modifiedItem.push(value);
                        }
                    });
                    selectedInvoice=modifiedItem;
                    TotalSumOfCheckedInvoice();
                }


                updateDataTableSelectAllCtrl(table);


                e.stopPropagation();
            });

            $('#salesGrid').on('click', 'tbody td, thead th:first-child', function (e) {
                $(this).parent().find('input[type="checkbox"]').trigger('click');
            });


            $('thead input[name="select_all"]', table.table().container()).on('click', function (e) {
                if (this.checked) {
                    $('#salesGrid tbody input[type="checkbox"]:not(:checked)').trigger('click');
                } else {
                    $('#salesGrid tbody input[type="checkbox"]:checked').trigger('click');
                }

                // Prevent click event from propagating to parent
                e.stopPropagation();
            });


            table.on('draw', function () {
                // Update state of "Select all" control
                updateDataTableSelectAllCtrl(table);
            });

            function ShowOnTable() {
                table.clear().draw();
                var sl = 0;
                var items = [];
                var invoiceAmount = 0.0;
                $.each(invoiceList, function (index, value) {
                    sl = sl + 1;
                    value.Sl = sl;
                    invoiceAmount += parseFloat(value.invoiceAmount);
                    items.push(value);
                    if(@Setting.IsPayVouAdjManually.ToString().ToLower()==false)
                    {
                        table.row.add([value.invoiceNumber,value.invoiceNumber, value.invoiceAmount,  '<input type="number" disabled="disabled" value="' + value.adjustedAmount + '" name="' + value.invoiceNumber + '"/>']).draw();
                    }
                    else{
                        table.row.add([value.invoiceNumber,value.invoiceNumber, value.invoiceAmount,  '<input type="number" value="' + value.adjustedAmount + '" name="' + value.invoiceNumber + '"/>']).draw();
                    }

                });
            }
            function TotalSumOfCheckedInvoice()
            {
                var totalAmount = 0.0;
                $.each(selectedInvoice,function(index,value){
                    totalAmount=totalAmount+value.AdjustedAmount;

                });
                $("#ReceiveAmt").val(totalAmount.toFixed(2)).focusout();
            }
        });
        </script>
    }
